/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ReportViewer.java
 *
 * Created on Dec 4, 2009, 11:32:56 AM
 */

package com.pmiapp.apcs;

import com.pmiapp.common.Notifiable;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Aaron
 */
public class ReportViewer extends javax.swing.JFrame {
    //private APCSConfig configSettings;
    private File dir;
    private ArrayList<File> selectedFiles;
    private ArrayList<String> selectedFilesList;
    private DefaultMutableTreeNode rootNode;
    private DefaultTreeModel treeModel;
    private String currentPath;
    private String currentFile;
    private JFileChooser chooser;
    private String tempDir;
    private Notifiable callingForm;
    private ArrayList<APCSData> dataCollected;
    private BufferedReader br = null;
    private FileReader fr = null;
    private ArrayList<String> clusterFiles;

    /** Creates new form ReportViewer */
    public ReportViewer(APCSConfig configSettings, TitleScrn aThis) {
        //this.configSettings = configSettings;
        dir = new File(configSettings.getDataPath());
        selectedFiles = new ArrayList<File>();
        selectedFilesList = new ArrayList<String>();
        clusterFiles = new ArrayList<String>();

        //rootNode = new DefaultMutableTreeNode("Root Node");
        treeModel = new DefaultTreeModel(addNodes(null,dir));        
        initComponents();
        currentPath = dir.getAbsolutePath();
        tempDir = currentPath;
        callingForm = aThis;
    }
    
  /**
   * Add nodes from under "dir" into curTop. Highly recursive.
   */
  private DefaultMutableTreeNode addNodes(DefaultMutableTreeNode curTop, File dir) {
    String curPath = dir.getPath();
    DefaultMutableTreeNode curDir = new DefaultMutableTreeNode(curPath);
    if (curTop != null) { // should only be null at root
      curTop.add(curDir);
    }
    try
    {
    ArrayList<String> ol = new ArrayList<String>();
    String[] tmp = dir.list();
    ol.addAll(Arrays.asList(tmp));
    Collections.sort(ol, String.CASE_INSENSITIVE_ORDER);
    File f;
    ArrayList<String> files = new ArrayList<String>();
    
    // Make two passes, one for Dirs and one for Files. This is #1.
    for (int i = 0; i < ol.size(); i++) {
      String thisObject = ol.get(i);
      String newPath;
      if (curPath.equals("."))
        newPath = thisObject;
      else
        newPath = curPath + File.separator + thisObject;
      if ((f = new File(newPath)).isDirectory())
        addNodes(curDir, f);
      else
        files.add(thisObject);
      
    }
    // Pass two: for files.
    for (int fnum = 0; fnum < files.size(); fnum++)
      curDir.add(new DefaultMutableTreeNode(files.get(fnum)));
    return curDir;
    }
    catch(NullPointerException e)
    {
        return null;
    }
  }

    private void addSelectedFile(String string) {
        this.selectedFilesList.add(string);
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                jList1.setListData(selectedFilesList.toArray());
                jList1.ensureIndexIsVisible(selectedFilesList.size() - 1);
            }
        });
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new JTree(treeModel);
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButtonAddFile = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton7 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("APCS Report Viewer");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTree1.setEditable(false);
        jTree1.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jButton1.setText("Display selected files");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Change Directory");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButtonAddFile.setText("Add");
        jButtonAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddFileActionPerformed(evt);
            }
        });

        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jList1);

        jButton5.setText("Create Data Structure");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton3.setText("Collect");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(jList2);

        jButton7.setText("<html>Create New<br>Sample Group</html>");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("SPC Charting");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Number of Sample Clusters:");
        jLabel1.setEnabled(false);

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));
        jSpinner1.setEnabled(false);

        jLabel2.setText("Number of Samples Per Cluster:");
        jLabel2.setEnabled(false);

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));
        jSpinner2.setEnabled(false);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(393, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addGap(312, 312, 312))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAddFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonClear)
                        .addContainerGap(668, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, 0, 184, Short.MAX_VALUE)
                        .addGap(493, 493, 493))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                        .addGap(417, 417, 417))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))
                        .addGap(417, 417, 417))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonClear)
                    .addComponent(jButtonAddFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton5))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        for(int i = 0; i < selectedFiles.size(); i++){
            System.out.println((i+1) + ": " + selectedFiles.get(i));
        }
}//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // 1. Open JFileChooser to allow user to select new directory
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(dir);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if(chooser.showDialog(this, "Choose New Data File Location") == JFileChooser.APPROVE_OPTION){
            dir = chooser.getCurrentDirectory();
            treeModel = new DefaultTreeModel(addNodes(null,dir));
            treeModel.reload();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) evt
            .getPath().getLastPathComponent();
        System.out.println("You selected " + node);
        if(node.toString().charAt(node.toString().length() -4) == '.'){
            //we are a file
            currentPath = tempDir;
            currentFile = node.toString();
            this.jButtonAddFile.setEnabled(true);
        } else{
            //we are a directory
            tempDir = node.toString();
        }
    }//GEN-LAST:event_jTree1ValueChanged

    private void jButtonAddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddFileActionPerformed
        if (currentFile.length() > 1) {
            selectedFiles.add(new File(currentPath + File.separator + currentFile));
            addSelectedFile(currentPath + File.separator + currentFile);
            currentFile = "";
            this.jButtonAddFile.setEnabled(false);
        }
}//GEN-LAST:event_jButtonAddFileActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        //get the currently selected index
        selectedFilesList.clear();
        selectedFiles.clear();
        jList1.setListData(selectedFilesList.toArray());
}//GEN-LAST:event_jButtonClearActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        callingForm.notifyTaskFinished(this, 2);
    }//GEN-LAST:event_formWindowClosing

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //Get the number of selected files
        dataCollected = new ArrayList<APCSData>();
        loadFiles(3);
    }//GEN-LAST:event_jButton5ActionPerformed
    private class jComboBoxFileList{
        private String name;
        private ArrayList<File> groupFiles;

        jComboBoxFileList(String name){
            this.name = name;
            groupFiles = new ArrayList<File>();
        }
        @Override
        public String toString(){
            return name;
        }

        private void addFiles(ArrayList<File> selectedFilesList) {
            this.groupFiles = selectedFilesList;
        }
    }
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if(this.selectedFiles.size() == (Integer)jSpinner2.getValue()){
            String ans;
            ans = (JOptionPane.showInputDialog("Enter Sample Group Name:"));

            if (ans != null){
                jComboBoxFileList list = new jComboBoxFileList(ans);
                list.addFiles(selectedFiles);
                selectedFilesList.clear();
                this.jComboBox1.addItem(list);
                this.jComboBox1.setSelectedIndex(this.jComboBox1.getItemCount()-1);
            }

            selectedFilesList.clear();
            selectedFiles.clear();
            jList1.setListData(selectedFilesList.toArray());
        } else{
            JOptionPane.showMessageDialog(null, "Number of Samples Per Cluster does \nnot match number of files selected");
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        this.jButton7.setEnabled(this.jCheckBox1.isSelected());
        this.jLabel1.setEnabled(this.jCheckBox1.isSelected());
        this.jSpinner1.setEnabled(this.jCheckBox1.isSelected());
        this.jLabel2.setEnabled(this.jCheckBox1.isSelected());
        this.jSpinner2.setEnabled(this.jCheckBox1.isSelected());        
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        JComboBox box = (JComboBox) evt.getSource();
        jComboBoxFileList temp = (jComboBoxFileList) box.getSelectedItem();
        System.out.println("Temp: " + temp.toString() + "\t#: " +temp.groupFiles.size());
        clusterFiles = new ArrayList<String>();
        System.out.println("Update JComboBox");
        for(int i = 0; i < temp.groupFiles.size(); i++){
            String tempfile = temp.groupFiles.get(i).getAbsolutePath(); System.out.println("File: " + tempfile);
            clusterFiles.add(tempfile);
        }
        jList2.removeAll();
        jList2.setListData(clusterFiles.toArray());
        jList2.setSelectedIndex(clusterFiles.size() - 1);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButtonAddFile;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

    private void loadFiles(int testType) {

        for(int i = 0; i < selectedFilesList.size(); i++){
            APCSData apData = new APCSData(testType);
            //determine temporary data structure
            if(testType == 0){
                //single pressure test
            } else if (testType == 1){
                //cyclic test type
            } else if (testType == 2){
                //multi-step test
            } else if (testType == 3){
                //burst test
                BurstTestData data = new BurstTestData(selectedFilesList.get(i));
                apData.setBurstData(data);
            }

            dataCollected.add(apData);
            
        }
    }

}
