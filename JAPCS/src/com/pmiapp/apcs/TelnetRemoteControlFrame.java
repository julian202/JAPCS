/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TelnetRemoveControlFrame.java
 *
 * Created on Jun 11, 2009, 12:11:25 PM
 */

package com.pmiapp.apcs;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.channels.SocketChannel;

/**
 *
 * @author Ron
 */
public class TelnetRemoteControlFrame extends javax.swing.JFrame {

    /** Creates new form TelnetServerFrame */
    public TelnetRemoteControlFrame(RemoteControllable caller, Boolean autoStart) {
        initComponents();
        aborted=false;
        this.caller=caller;
        if (autoStart){
            portTextField.setText("23");
            startNewProcess();
        }
    }

    private boolean aborted;
    private RemoteControllable caller;
    private TelnetHandler process;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        openButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        receivedLineLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        responseLineLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("TCP/IP Remote Control Interface");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Port:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(jLabel1, gridBagConstraints);

        portTextField.setText("23");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(portTextField, gridBagConstraints);

        openButton.setText("Start");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(openButton, gridBagConstraints);

        closeButton.setText("Stop");
        closeButton.setEnabled(false);
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(closeButton, gridBagConstraints);

        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 2, 1);
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 2, 1);
        getContentPane().add(jLabel3, gridBagConstraints);

        jLabel4.setText("Command Received:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        getContentPane().add(jLabel4, gridBagConstraints);

        receivedLineLabel.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(receivedLineLabel, gridBagConstraints);

        statusLabel.setText("Status: Closed");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        getContentPane().add(statusLabel, gridBagConstraints);

        jLabel5.setText("Response Sent Back:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(jLabel5, gridBagConstraints);

        responseLineLabel.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(responseLineLabel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        startNewProcess();
    }//GEN-LAST:event_openButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        aborted=true;
        try {
            process.finish();
        } catch (IOException ex) {
            statusLabel.setText("Status: Error closing connection");
        }
        closeButton.setEnabled(false);
        openButton.setEnabled(true);
        portTextField.setEnabled(true);
        statusLabel.setText("Status: Closed by User");
    }//GEN-LAST:event_closeButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        aborted=true;
        process = null;
        setVisible(false);
        caller.notifyTaskFinished(this,0);
    }//GEN-LAST:event_formWindowClosing

    public void close() {
        dispatchEvent(new java.awt.event.WindowEvent(this,java.awt.event.WindowEvent.WINDOW_CLOSING));
    }

    private int getPortNumber(){
        int portNumber;

        try {
            portNumber=Integer.parseInt(portTextField.getText());
            portTextField.setEnabled(false);
            openButton.setEnabled(false);
            closeButton.setEnabled(true);
            aborted = false;
        } catch (NumberFormatException e) {
            statusLabel.setText("Status: Improper port number");
            portNumber=-1;
        }
        return portNumber;
    }

    private void startNewProcess(){
        int portNumber;

        portNumber = getPortNumber();

        if (portNumber > -1){
            process = new TelnetHandler(portNumber);
            new Thread(process).start();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton openButton;
    private javax.swing.JTextField portTextField;
    private javax.swing.JLabel receivedLineLabel;
    private javax.swing.JLabel responseLineLabel;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables


    private class TelnetHandler implements Runnable{
        private ServerSocket server;
        private Socket sock;
        private SocketChannel channel;
        private PrintWriter out;
        private BufferedReader in;
        private int port;
        private TelnetRemoteControlFrame parent;

        public TelnetHandler(int i){
            server=null;
            sock=null;
            out=null;
            in=null;
            port = i;
        }

        private int openServerSocket(){
            try {
                server = new ServerSocket(port);
            } catch (IOException ex) {
                server=null;
            }
            if (server==null){
                statusLabel.setText("Status: Error trying to initialize connection");
                return -1;
            }else{
                statusLabel.setText("Status: Waiting for connection");
                return 1;
            }
        }

        private int waitForConnection(){
            
            sock=null;
            try {
                sock = server.accept();
            } catch (IOException ex) {
                statusLabel.setText("Status: Wait for connection aborted");
                return -1;
            }

            try {
                out = new PrintWriter(sock.getOutputStream());
                in = new BufferedReader(new InputStreamReader(sock.getInputStream()));
                statusLabel.setText("Status: Connected");
            } catch (IOException ex) {
                statusLabel.setText("Status: Error initializing connection");
                return -1;
            }

            return 1;
        }

        private int processCommunications(){
            String line;
            String response;

            while(!aborted) {
                try {
                    line=in.readLine();
                    if (line != null){
                        if (line.length()>0) {
                            receivedLineLabel.setText(line);
                            // send line to caller and get a response
                            response = caller.processCommand(line);
                            responseLineLabel.setText(response);
                            // send response back
                            if (out!=null) {
                                out.println(response);
                                out.flush();
                            }
                        }
                    }else{
                        statusLabel.setText("Status: Connection dropped");
                        return -1;
                    }
                } catch (IOException ex) {
                    statusLabel.setText("Status: Connection lost");
                    return -1;
                }
            }

            return 1;
        }

        public void finish() throws IOException{
            
            if (sock != null){
                if (!sock.isClosed())
                    sock.close();
                sock = null;
            }

            if (server != null){
                if (!server.isClosed())
                    server.close();
                server = null;
            }
            receivedLineLabel.setText("");
            responseLineLabel.setText("");
        }

        public void run() {

            if (openServerSocket() == 1)
                if (waitForConnection() == 1)
                    if (processCommunications() == 1){
                        statusLabel.setText("Status:  Connection closed");
                    }else{
                        if (!aborted){
                            statusLabel.setText("Status: Error");
                            startNewProcess();
                        }
                    }
            try {
                finish();
            } catch (IOException ex) {
                statusLabel.setText("Status: Data I/O Error");
            }
        }

    }
}
