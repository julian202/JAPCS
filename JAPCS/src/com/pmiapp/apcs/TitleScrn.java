/*
 * TitleScrn.java
 *
 * Originally for DMPC,
 * copied over and modified for APCS starting 8-31-05
 * Original version was the main class in the DMPC project.
 * In APCS, this is not runnable directly, but is called by Main
 *
 * Program Edits:
 * Version 9.1.7: Date: 11-24-09 -
 *      Dr. Gupta asked for the maintain pressure routine to be included into
 *      the hold pressure part of the burst pressure test. AJB
 * Version 9.1.10: 7-8-10 rvw
 *     Added Fracture test, which uses encoder support
 * Version 9.1.11: 5-4-12 rvw
 *   Code cleanup based on NetBeans suggestions.
 *   Added support for fast acting isolation valve before sample in burst test
 *   and second pressure gauge located at burst test sample.
 */

package com.pmiapp.apcs;

import gnu.io.CommPortIdentifier;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Properties;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;

/** Title Screen for APCS control program
 *
 * @author  Ron V. Webber
 */
public class TitleScrn extends javax.swing.JFrame implements com.pmiapp.common.Notifiable  {
    /**
     * Creates new form TitleScrn
     * @param executablePath full path to directory that holds the executable program.  Default files may
     * be found here.  This directory may be write protected, but does not have to be.
     * @param userPath full path to base directory that holds user files.  For single-user systems,
     * this is the same as executablePath.  For multi-user systems, this is different.
     * This directory must be writable.
     */
    private String version = "9.1.12x";
    public TitleScrn(String executablePath, String userPath, Boolean autoStart) {
        this.exePath=executablePath;
        this.userPath=userPath;
        setIconImage(new ImageIcon(getClass().getResource("/com/pmiapp/apcs/gifs/apcs16.gif")).getImage());
        initComponents();  
        initializeStuff();
        commHandshakeTimingMenuItem.setVisible(false);
        currentChildWindow=null;
        planToCloseLater=false;
        fractureMenuItem.setVisible(configSettings.doesEncoderExist());
        // quick burst test requires a sample isolation valve,
        // sample pressure gauge, air operated fast pump, and 3 motor valves
        quickBurstTestMenuItem.setVisible(
                (configSettings.getSampleIsolationValve()>=0) &&
                (configSettings.getSamplePressureGauge()>=0) &&
                (configSettings.getFastPumpAnalogOutput()>=0) &&
                (configSettings.getNumberOfMotorValves()>2));
        if (autoStart) {
            startSinglePressure(true);
        }
    }
   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        titleLabel1 = new javax.swing.JLabel();
        titleLabel2 = new javax.swing.JLabel();
        titleLabel3 = new javax.swing.JLabel();
        demoLabel = new javax.swing.JLabel();
        applogo = new javax.swing.JLabel();
        spacerLabel = new javax.swing.JLabel();
        groupLabel = new javax.swing.JLabel();
        rangePanel = new javax.swing.JPanel();
        rangeRadioButton1 = new javax.swing.JRadioButton();
        rangeRadioButton2 = new javax.swing.JRadioButton();
        chamberPanel = new javax.swing.JPanel();
        chamberRadioButton1 = new javax.swing.JRadioButton();
        chamberRadioButton2 = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        setupMenu = new javax.swing.JMenu();
        selectModeMenu = new javax.swing.JMenu();
        supervisorCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        userCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        changePasswordMenuItem = new javax.swing.JMenuItem();
        startGroupsMenuItem = new javax.swing.JMenuItem();
        groupsMenu = new javax.swing.JMenu();
        selectGroupMenuItem = new javax.swing.JMenuItem();
        addGroupMenuItem = new javax.swing.JMenuItem();
        mainMenu = new javax.swing.JMenu();
        singlePressureMenuItem = new javax.swing.JMenuItem();
        multiPressureMenuItem = new javax.swing.JMenuItem();
        cycleTestMenuItem = new javax.swing.JMenuItem();
        burstTestMenuItem = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        fractureMenuItem = new javax.swing.JMenuItem();
        quickBurstTestMenuItem = new javax.swing.JMenuItem();
        systemMenu = new javax.swing.JMenu();
        manualControlMenuItem = new javax.swing.JMenuItem();
        controlParameterMenuItem = new javax.swing.JMenuItem();
        calibrateMenuItem = new javax.swing.JMenuItem();
        selectCommPortMenu = new javax.swing.JMenu();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        setWindowStyleMenu = new javax.swing.JMenu();
        commHandshakeTimingMenuItem = new javax.swing.JMenuItem();
        purgeFluidMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("APCS Version " + version
        );
        setName("TitleScrn"); // NOI18N
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setBackground(new java.awt.Color(255, 128, 0));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(255, 192, 128));
        jPanel2.setFocusTraversalPolicyProvider(true);
        jPanel2.setLayout(new java.awt.GridBagLayout());

        titleLabel1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        titleLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel1.setText("Automated Pressure Control");
        titleLabel1.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 0, 10);
        jPanel2.add(titleLabel1, gridBagConstraints);

        titleLabel2.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        titleLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel2.setText("System");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(titleLabel2, gridBagConstraints);

        titleLabel3.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        titleLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel3.setText(this.version);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 10);
        jPanel2.add(titleLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel1.add(jPanel2, gridBagConstraints);

        demoLabel.setBackground(new java.awt.Color(255, 192, 128));
        demoLabel.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        demoLabel.setForeground(java.awt.Color.red);
        demoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        demoLabel.setText("Demo Mode");
        demoLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        jPanel1.add(demoLabel, gridBagConstraints);

        applogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/pmiapp/apcs/gifs/appreflect.jpg"))); // NOI18N
        applogo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        applogo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                applogoMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(applogo, gridBagConstraints);

        spacerLabel.setBackground(new java.awt.Color(255, 128, 0));
        spacerLabel.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        spacerLabel.setForeground(new java.awt.Color(255, 128, 0));
        spacerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        spacerLabel.setText("X");
        spacerLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(spacerLabel, gridBagConstraints);

        groupLabel.setBackground(new java.awt.Color(255, 192, 128));
        groupLabel.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        groupLabel.setForeground(java.awt.Color.red);
        groupLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        groupLabel.setText("Group: *Default*");
        groupLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        jPanel1.add(groupLabel, gridBagConstraints);

        rangePanel.setBackground(new java.awt.Color(255, 192, 128));
        rangePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Range Select"));
        rangePanel.setLayout(new javax.swing.BoxLayout(rangePanel, javax.swing.BoxLayout.Y_AXIS));

        rangeRadioButton1.setBackground(new java.awt.Color(255, 192, 128));
        buttonGroup3.add(rangeRadioButton1);
        rangeRadioButton1.setText("Low Range");
        rangeRadioButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rangeRadioButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rangeRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeRadioButton1ActionPerformed(evt);
            }
        });
        rangePanel.add(rangeRadioButton1);

        rangeRadioButton2.setBackground(new java.awt.Color(255, 192, 128));
        buttonGroup3.add(rangeRadioButton2);
        rangeRadioButton2.setText("High Range");
        rangeRadioButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rangeRadioButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rangeRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeRadioButton2ActionPerformed(evt);
            }
        });
        rangePanel.add(rangeRadioButton2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(rangePanel, gridBagConstraints);

        chamberPanel.setBackground(new java.awt.Color(255, 192, 128));
        chamberPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Chamber Select"));
        chamberPanel.setLayout(new javax.swing.BoxLayout(chamberPanel, javax.swing.BoxLayout.Y_AXIS));

        chamberRadioButton1.setBackground(new java.awt.Color(255, 192, 128));
        buttonGroup2.add(chamberRadioButton1);
        chamberRadioButton1.setText("Chamber 1");
        chamberRadioButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chamberRadioButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chamberRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chamberRadioButton1ActionPerformed(evt);
            }
        });
        chamberPanel.add(chamberRadioButton1);

        chamberRadioButton2.setBackground(new java.awt.Color(255, 192, 128));
        buttonGroup2.add(chamberRadioButton2);
        chamberRadioButton2.setText("Chamber 2");
        chamberRadioButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chamberRadioButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chamberRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chamberRadioButton2ActionPerformed(evt);
            }
        });
        chamberPanel.add(chamberRadioButton2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(chamberPanel, gridBagConstraints);

        getContentPane().add(jPanel1);

        setupMenu.setText("Setup");

        selectModeMenu.setText("Select Mode");

        supervisorCheckBoxMenuItem.setText("Supervisor");
        supervisorCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supervisorCheckBoxMenuItemActionPerformed(evt);
            }
        });
        selectModeMenu.add(supervisorCheckBoxMenuItem);

        userCheckBoxMenuItem.setText("User");
        userCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userCheckBoxMenuItemActionPerformed(evt);
            }
        });
        selectModeMenu.add(userCheckBoxMenuItem);

        setupMenu.add(selectModeMenu);
        setupMenu.add(jSeparator1);

        changePasswordMenuItem.setText("Change Supervisor Password");
        changePasswordMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordMenuItemActionPerformed(evt);
            }
        });
        setupMenu.add(changePasswordMenuItem);

        startGroupsMenuItem.setText("Initialize Groups");
        startGroupsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startGroupsMenuItemActionPerformed(evt);
            }
        });
        setupMenu.add(startGroupsMenuItem);

        jMenuBar1.add(setupMenu);

        groupsMenu.setText("Groups");

        selectGroupMenuItem.setText("Select Group");
        selectGroupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectGroupMenuItemActionPerformed(evt);
            }
        });
        groupsMenu.add(selectGroupMenuItem);

        addGroupMenuItem.setText("Add Group");
        addGroupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGroupMenuItemActionPerformed(evt);
            }
        });
        groupsMenu.add(addGroupMenuItem);

        jMenuBar1.add(groupsMenu);

        mainMenu.setText("Main");
        mainMenu.setToolTipText("choose to execute an automated test or manual control");

        singlePressureMenuItem.setText("Single Target Pressure Control");
        singlePressureMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singlePressureMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(singlePressureMenuItem);

        multiPressureMenuItem.setText("Multiple Target pressure Control");
        multiPressureMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiPressureMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(multiPressureMenuItem);

        cycleTestMenuItem.setText("Cyclic Pressure Test");
        cycleTestMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cycleTestMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(cycleTestMenuItem);

        burstTestMenuItem.setText("Burst Pressure Test");
        burstTestMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                burstTestMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(burstTestMenuItem);

        jMenuItem9.setText("SFE Control");
        jMenuItem9.setEnabled(false);
        mainMenu.add(jMenuItem9);

        fractureMenuItem.setText("Fracture Test");
        fractureMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fractureMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(fractureMenuItem);

        quickBurstTestMenuItem.setText("Quick Burst Test");
        quickBurstTestMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickBurstTestMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(quickBurstTestMenuItem);

        jMenuBar1.add(mainMenu);

        systemMenu.setText("System");
        systemMenu.setToolTipText("choose comm port or window style");

        manualControlMenuItem.setText("Manual Control");
        manualControlMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualControlMenuItemActionPerformed(evt);
            }
        });
        systemMenu.add(manualControlMenuItem);

        controlParameterMenuItem.setText("Control Parameters");
        controlParameterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlParameterMenuItemActionPerformed(evt);
            }
        });
        systemMenu.add(controlParameterMenuItem);

        calibrateMenuItem.setText("Calibrate");
        calibrateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calibrateMenuItemActionPerformed(evt);
            }
        });
        systemMenu.add(calibrateMenuItem);

        selectCommPortMenu.setText("Select Comm Port");
        selectCommPortMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCommPortMenuActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonMenuItem1);
        jRadioButtonMenuItem1.setText("Demo");
        jRadioButtonMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem1ActionPerformed(evt);
            }
        });
        selectCommPortMenu.add(jRadioButtonMenuItem1);

        systemMenu.add(selectCommPortMenu);

        setWindowStyleMenu.setText("Set Window Style");
        systemMenu.add(setWindowStyleMenu);

        commHandshakeTimingMenuItem.setText("Comm Handshake Timing");
        commHandshakeTimingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commHandshakeTimingMenuItemActionPerformed(evt);
            }
        });
        systemMenu.add(commHandshakeTimingMenuItem);

        purgeFluidMenuItem.setText("Purge Fluid");
        purgeFluidMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purgeFluidMenuItemActionPerformed(evt);
            }
        });
        systemMenu.add(purgeFluidMenuItem);

        jMenuItem1.setText("Report");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        systemMenu.add(jMenuItem1);

        jMenuBar1.add(systemMenu);

        exitMenu.setText("Exit");

        exitMenuItem.setText("Exit Program");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        exitMenu.add(exitMenuItem);

        jMenuBar1.add(exitMenu);

        setJMenuBar(jMenuBar1);

        getAccessibleContext().setAccessibleName("APCS 1.0");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chamberRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chamberRadioButton2ActionPerformed
        configSettings.setCurrentChamberNumber(2);
    }//GEN-LAST:event_chamberRadioButton2ActionPerformed

    private void chamberRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chamberRadioButton1ActionPerformed
        configSettings.setCurrentChamberNumber(1);
    }//GEN-LAST:event_chamberRadioButton1ActionPerformed

    private void purgeFluidMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purgeFluidMenuItemActionPerformed
        currentCommunicationSystem = new APCSCommunication(configSettings); 
        if (commPortIndex>0) {
            if (currentCommunicationSystem.openPort(commPortList.get(commPortIndex-1))==false)
            {
                JOptionPane.showMessageDialog(this,"Error trying to open COMM port","APCS",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        enableMenus(false);
        checkChamberAndRangeSelections();
        PurgeFluid x = new PurgeFluid(currentCommunicationSystem, this);
        x.initialize();
        x.setVisible(true);
        currentChildWindow=x;
    }//GEN-LAST:event_purgeFluidMenuItemActionPerformed

    private void commHandshakeTimingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commHandshakeTimingMenuItemActionPerformed
        currentCommunicationSystem = new APCSCommunication(configSettings); 
        if (commPortIndex>0) {
            if (currentCommunicationSystem.openPort(commPortList.get(commPortIndex-1))==false)
            {
                JOptionPane.showMessageDialog(this,"Error trying to open COMM port","APCS",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        enableMenus(false);
        CommHandshakeTiming c = new CommHandshakeTiming(currentCommunicationSystem, this);
        c.setVisible(true);
        currentChildWindow=c;
    }//GEN-LAST:event_commHandshakeTimingMenuItemActionPerformed

    private void startSinglePressure(Boolean autoStart){
        // run single pressure test - for now same as all other calls, but with different form

        currentCommunicationSystem = new APCSCommunication(configSettings);
        if (commPortIndex>0) {
            if (currentCommunicationSystem.openPort(commPortList.get(commPortIndex-1))==false)
            {
                JOptionPane.showMessageDialog(this,"Error trying to open COMM port","APCS",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        enableMenus(false);
        checkChamberAndRangeSelections();
        SinglePressureTest x = new SinglePressureTest(currentCommunicationSystem, this, groupPath);
        x.initialize();
        x.setVisible(true);
        currentChildWindow=x;
        if (autoStart) {
            x.autoStartRemoteInterface();
        }
    }

    private void singlePressureMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singlePressureMenuItemActionPerformed
        startSinglePressure(false);
    }//GEN-LAST:event_singlePressureMenuItemActionPerformed

    private void controlParameterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controlParameterMenuItemActionPerformed
        String[] c,v,d;
        c=new String[11];
        v=new String[11];
        d=new String[11];
        c[0]="Default Speed";
        v[0]=""+configSettings.getDefaultSpeed();
        d[0]="Default pressurization\nrate if the speed factor is\nequal to 1.\nThe generator will start\nat this speed for burst\ntests.";
        c[1]="Ram Up Speed";
        v[1]=""+configSettings.getRamUpSpeed();
        d[1]="Pressurization starting motor speed";
        c[2]="Ram Down Speed";
        v[2]=""+configSettings.getRamDownSpeed();
        d[2]="Depressurization starting motor speed";
        c[3]="Pressure Tolerance";
        v[3]=""+configSettings.getPressureTolerance();
        d[3]="(PSI), The pressure\nsetting for changing the\ncontrol from\nMicro-control to\ncoarse control,\nif the target pressure is\nbeyond the\npressure tolerance, the\ncontrol will change to\ncoarse-control mode";
        c[4]="Pressure Accurate";
        v[4]=""+configSettings.getPressureAccurate();
        d[4]="Pressure control\naccuracy setting, in PSI";
        c[5]="Slow Down Pressure";
        v[5]=""+configSettings.getSlowDownPressure();
        d[5]="The pressure setting for\nslowing the control\nprocess to approach the\ntarget gently, in PSI";
        c[6]="Micro Control Starting Speed";
        v[6]=""+configSettings.getMicroControlStartingSpeed();
        d[6]="Micro-control starting\nmotor speed";
        c[7]="Pulse Height";
        v[7]=""+configSettings.getPulseHeight();
        d[7]="The maximum motor\nspeed setting for\nMicro-control algorithm";
        c[8]="Max Speed LP";
        v[8]=""+configSettings.getMaxSpeedLP();
        d[8]="Maximum speed for generator\nat low pressure.";
        c[9]="Max Speed HP";
        v[9]=""+configSettings.getMaxSpeedHP();
        d[9]="Maximum speed for generator\nat high pressure.";
        c[10]="Fast Pump Increment Time";
        v[10]=""+configSettings.getFastPumpIncrementTime();
        d[10]="Time, in seconds between\nincrements of the fast pump.\nDecrease this to make\npressure go up faster\n(may increase overshoot)";
        com.pmiapp.common.MultiInputDialog m = new com.pmiapp.common.MultiInputDialog(this, "Control Parameters", c, v, d);
        m.setVisible(true);
        String[] r = m.getResults();
        m.dispose();
        if (r[0]==null) {
            return;
        }
        int i;
        double s;
        try {
            i=Integer.parseInt(r[0]);
            configSettings.setDefaultSpeed(i);
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,"Error in Default Speed value");
        }
        try {
            i=Integer.parseInt(r[1]);
            configSettings.setRamUpSpeed(i);
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,"Error in Ram Up Speed value");
        }
        try {
            i=Integer.parseInt(r[2]);
            configSettings.setRamDownSpeed(i);
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,"Error in Ram Down Speed value");
        }
        try {
            s=Double.parseDouble(r[3]);
            configSettings.setPressureTolerance(s);
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,"Error in Pressure Tolerance value");
        }
        try {
            s=Double.parseDouble(r[4]);
            configSettings.setPressureAccurate(s);
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,"Error in Pressure Accurate value");
        }
        try {
            s=Double.parseDouble(r[5]);
            configSettings.setSlowDownPressure(s);
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,"Error in Slow Down Pressure value");
        }
        try {
            i=Integer.parseInt(r[6]);
            configSettings.setMicroControlStartingSpeed(i);
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,"Error in Micro Control Starting Speed value");
        }
        try {
            i=Integer.parseInt(r[7]);
            configSettings.setPulseHeight(i);
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,"Error in Pulse Height value");
        }
        try {
            i=Integer.parseInt(r[8]);
            configSettings.setMaxSpeedLP(i);
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,"Error in Max Speed LP value");
        }
        try {
            i=Integer.parseInt(r[9]);
            configSettings.setMaxSpeedHP(i);
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,"Error in Max Speed HP value");
        }
        try {
            s=Double.parseDouble(r[10]);
            configSettings.setFastPumpIncrementTime(s);
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,"Error in Fast Pump Increment Time value");
        }        
    }//GEN-LAST:event_controlParameterMenuItemActionPerformed

    private void addGroupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGroupMenuItemActionPerformed
        String s=JOptionPane.showInputDialog(this,"Enter name of new group:");
        if (s==null) {
            return;
        }
        if (s.length()==0) {
            return;
        }
        // check for either type of slash in string, neither of which should be allowed, but either
        // of which could pass through the rest of this routine without generating any errors
        if (s.indexOf("\\")>=0) {
            JOptionPane.showMessageDialog(this,"Error:  Illegal character in name");
            return;
        }
        if (s.indexOf("/")>=0) {
            JOptionPane.showMessageDialog(this,"Error:  Illegal character in name");
            return;
        }
        // check to see if it already exists
        for (int i=0; i<groupsList.length; i++) {
            if (groupsList[i].equalsIgnoreCase(s)) {
                JOptionPane.showMessageDialog(this,"A group with this name already exists");
                return;
            }
        }
        // create the directory
        File f=new File(userPath+File.separator+"groups",s);
        if (f.exists()) {
            JOptionPane.showMessageDialog(this,"Error:  Something with this name already exists");
            return;
        }
        f.mkdir();
        if (f.isDirectory()==false) {
            JOptionPane.showMessageDialog(this,"Error:  Could not create new group directory");
            return;
        }
        // if we can, create a "data" directory inside.  If not, no errors are generated.
        new File(f,"data").mkdir();
        // remember the name of the current group, unless we are currently on the default group
        String s2=null;
        if (currentGroupIndex>=0) {
            s2=groupsList[currentGroupIndex];
        }
        // add new name to list
        String[] temp=groupsList;
        groupsList=new String[temp.length+1];
        System.arraycopy(temp, 0, groupsList, 0, temp.length);
        groupsList[temp.length]=s;
        java.util.Arrays.sort(groupsList);
        for (int i=0; i<groupsList.length; i++) {
            if (groupsList[i].equals(s2)) {
                currentGroupIndex=i;
                break;
            }
        }
    }//GEN-LAST:event_addGroupMenuItemActionPerformed

    private void startGroupsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startGroupsMenuItemActionPerformed
        String s=JOptionPane.showInputDialog(this,"Enter name of initial group:");
        if (s==null) {
            return;
        }
        if (s.length()==0) {
            return;
        }
        // check for either type of slash in string, neither of which should be allowed, but either
        // of which could pass through the rest of this routine without generating any errors
        if (s.indexOf("\\")>=0) {
            JOptionPane.showMessageDialog(this,"Error:  Illegal character in name");
            return;
        }
        if (s.indexOf("/")>=0) {
            JOptionPane.showMessageDialog(this,"Error:  Illegal character in name");
            return;
        }
        // create the initial group directory
        File f=new File(userPath+File.separator, "groups");
        f.mkdir();
        if (f.isDirectory()==false) {
            JOptionPane.showMessageDialog(this,"Error:  Could not create 'groups' directory");
            return;
        }
        File f2=new File(f, s);
        if (f2.exists()) {
            JOptionPane.showMessageDialog(this,"Error:  Something with this name already exists");
            return;
        }
        f2.mkdir();
        if (f2.isDirectory()==false) {
            JOptionPane.showMessageDialog(this,"Error:  Could not create initial group directory");
            return;
        }
        // if we can, create a "data" directory inside.  If not, no errors are generated.
        new File(f2,"data").mkdir();
        startGroupsMenuItem.setVisible(false);
        groupsMenu.setVisible(true);
        groupLabel.setVisible(true);
        currentGroupIndex=0;
        groupsList=new String[1];
        groupsList[0]=s;
        setupGroup();
    }//GEN-LAST:event_startGroupsMenuItemActionPerformed

    private void selectGroupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectGroupMenuItemActionPerformed
        GroupSelector gs = new GroupSelector(this, groupsList, currentGroupIndex);
        gs.setVisible(true);
        int i=gs.getSelectedIndex();
        if ((i>=0) && (i-1!=currentGroupIndex)) {
            // close out the current group, if it is not the default (which stays loaded since it holds global values as well)
            if (currentGroupIndex>=0) {
                saveCurrentGroupValues();
            }
            // change to new group
            currentGroupIndex=i-1;
            setupGroup();
        }
    }//GEN-LAST:event_selectGroupMenuItemActionPerformed

    private void supervisorCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supervisorCheckBoxMenuItemActionPerformed
        if (configSettings.isSupervisorMode()) {
            return;
        }
        if (configSettings.setSupervisorMode("")==false) {
            String checkPassword = JOptionPane.showInputDialog(this,"Enter supervisor password");
            if (configSettings.setSupervisorMode(checkPassword)==false) {
                setModeStuff(false); // just in case
                return;
            }
        }
        setModeStuff(true);
    }//GEN-LAST:event_supervisorCheckBoxMenuItemActionPerformed

    private void userCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userCheckBoxMenuItemActionPerformed
        configSettings.setUserMode();
        setModeStuff(false);
    }//GEN-LAST:event_userCheckBoxMenuItemActionPerformed

    private void changePasswordMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordMenuItemActionPerformed
        String newPassword = JOptionPane.showInputDialog(this,"Enter new supervisor password");
        if (newPassword==null) {
            return;
        }
        configSettings.setSupervisorPassword(newPassword);        
    }//GEN-LAST:event_changePasswordMenuItemActionPerformed

    private void burstTestMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_burstTestMenuItemActionPerformed
        // run burst pressure test - for now same as all other calls, but with different form
        
        currentCommunicationSystem = new APCSCommunication(configSettings); 
        if (commPortIndex>0) {
            if (currentCommunicationSystem.openPort(commPortList.get(commPortIndex-1))==false)
            {
                JOptionPane.showMessageDialog(this,"Error trying to open COMM port","APCS",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        enableMenus(false);
        checkChamberAndRangeSelections();
        BurstTester b = new BurstTester(currentCommunicationSystem, this, groupPath);
        b.setVisible(true);
        b.initialize();
        currentChildWindow=b;
    }//GEN-LAST:event_burstTestMenuItemActionPerformed

    private void calibrateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calibrateMenuItemActionPerformed
        // run calibration - same as manual control but with a different form
        currentCommunicationSystem = new APCSCommunication(configSettings); 
        if (commPortIndex>0) {
            if (currentCommunicationSystem.openPort(commPortList.get(commPortIndex-1))==false)
            {
                JOptionPane.showMessageDialog(this,"Error trying to open COMM port","APCS",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        enableMenus(false);
        checkChamberAndRangeSelections();
        Calibrate c = new Calibrate(currentCommunicationSystem, this);
        c.setVisible(true);
        c.initialize(); // start the gauge read thread
        currentChildWindow=c;
    }//GEN-LAST:event_calibrateMenuItemActionPerformed

    private void manualControlMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualControlMenuItemActionPerformed
        // run manual control
        // APCSCommunication requires configSettings because it loads in the
        // current gauge calibration information
        // this is the debugging version
        //currentCommunicationSystem = new APCSCommunication(configSettings, new File(userPath,"comlog.txt")); 
        // this is the normal version
        currentCommunicationSystem = new APCSCommunication(configSettings); 
        if (commPortIndex>0) {
            if (currentCommunicationSystem.openPort(commPortList.get(commPortIndex-1))==false)
            {
                JOptionPane.showMessageDialog(this,"Error trying to open COMM port","APCS",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        enableMenus(false);
        checkChamberAndRangeSelections();
        // New in the APCS - manual control will start its own runnable worker thread
        // and will not close the communication port when it is done - we will close
        // the communication port when we are notified that manual control is done with it.
        // Since the communication system knows the config settings, we don't have to
        // pass this to manual control - it can ask for it if it needs it
        ManCtrl m = new ManCtrl(currentCommunicationSystem, this);
        m.initialize();
        m.setVisible(true);
        currentChildWindow=m;
    }//GEN-LAST:event_manualControlMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // exit program
        // this eventually calls exitForm
        dispatchEvent(new java.awt.event.WindowEvent(this,java.awt.event.WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jRadioButtonMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem1ActionPerformed
        doCommMenuClick(0);
    }//GEN-LAST:event_jRadioButtonMenuItem1ActionPerformed

    /** Exit the Application and write out configSettings */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        // close any child window, if there is one
        if (currentChildWindow!=null) {
            planToCloseLater=true;
            // this can set planToCloseLater to false, if the child window doesn't want to close now
            currentChildWindow.dispatchEvent(evt);
            if (planToCloseLater==false) {
                return;
            }
        }
        // check to see if there is an open communication port
        if (currentCommunicationSystem!=null) {
            // this means that some other form is probably running
            // shut down generators, just in case
            currentCommunicationSystem.setPGenSpeed(0,0);
            currentCommunicationSystem.setPGenSpeed(1,0);
            if (JOptionPane.showConfirmDialog(this,
                    "System is currently running.  Do you want to abort everything and shut down without resetting?",
                    "APCS Control",JOptionPane.YES_NO_OPTION)==JOptionPane.NO_OPTION) {
                return;
            }
            currentCommunicationSystem.closePort();
            currentCommunicationSystem=null;
        }
        // store the current screen location
        configSettings.rememberWindowPosition(this);
         ////////////////////////////
        try {
         BufferedWriter out = new BufferedWriter
         (new FileWriter(configFile));
         out.write("aString1\n");
         out.close();
         boolean success = (new File
         ("filename")).delete();
         if (success) {
            System.out.println("The file has been successfully deleted"); 
         }
         BufferedReader in = new BufferedReader
         (new FileReader("filename"));
         String str;
         while ((str = in.readLine()) != null) {
            System.out.println(str);
         }
         in.close();
         }
         catch (IOException e) {
            System.out.println("exception occoured"+ e);
            System.out.println("File does not exist or you are trying to read a file thathas been deleted");
         }
        ///////////////////////////
        int i=com.pmiapp.common.GaugeChannel.saveConfigValues(configProperties, configFile,
            new File(userPath, "apcs.config.temp"),
            new File(userPath, "apcs.config.old"));
        if (i==-1) {
            JOptionPane.showMessageDialog(rootPane,
                "Can't open apcs.config.temp to output new configuration values."+
                "  Any settings changes will be lost","APCS",
                JOptionPane.ERROR_MESSAGE);
        }
        else if (i==-2) {
            JOptionPane.showMessageDialog(rootPane,
                "Can't rename temporary configuration file.  "+
                "Your new configuration settings are in file apcs.config.temp.",
                "APCS",JOptionPane.ERROR_MESSAGE);
        }
        if (currentGroupIndex!=-1) {
            // we also need to write out the group configuration file
            saveCurrentGroupValues();
        }
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void rangeRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeRadioButton1ActionPerformed
        configSettings.setCurrentRangeNumber(1);
}//GEN-LAST:event_rangeRadioButton1ActionPerformed

    private void rangeRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeRadioButton2ActionPerformed
        configSettings.setCurrentRangeNumber(2);
}//GEN-LAST:event_rangeRadioButton2ActionPerformed

    private void cycleTestMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cycleTestMenuItemActionPerformed
        // run cyclic pressure test - for now same as all other calls, but with different form

        currentCommunicationSystem = new APCSCommunication(configSettings);
        if (commPortIndex>0) {
            if (currentCommunicationSystem.openPort(commPortList.get(commPortIndex-1))==false)
            {
                JOptionPane.showMessageDialog(this,"Error trying to open COMM port","APCS",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        enableMenus(false);
        checkChamberAndRangeSelections();
        CycleTest b = new CycleTest(currentCommunicationSystem, this, groupPath);
        b.initialize();
        b.setVisible(true);
        currentChildWindow=b;
}//GEN-LAST:event_cycleTestMenuItemActionPerformed

    private void multiPressureMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiPressureMenuItemActionPerformed
        // run multi pressure test - for now same as all other calls, but with different form

        currentCommunicationSystem = new APCSCommunication(configSettings);
        if (commPortIndex>0) {
            if (currentCommunicationSystem.openPort(commPortList.get(commPortIndex-1))==false)
            {
                JOptionPane.showMessageDialog(this,"Error trying to open COMM port","APCS",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        enableMenus(false);
        checkChamberAndRangeSelections();
        MultiTest x = new MultiTest(currentCommunicationSystem, this, groupPath);
        x.initialize();
        x.setVisible(true);
        currentChildWindow=x;
    }//GEN-LAST:event_multiPressureMenuItemActionPerformed

    private void applogoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_applogoMouseClicked
        //TestPassScrn tps = new TestPassScrn();
        //tps.setVisible(true);
        //currentChildWindow = tps;
    }//GEN-LAST:event_applogoMouseClicked

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        
    }//GEN-LAST:event_formMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Open report viewer
        ReportViewer rV = new ReportViewer(configSettings, this);
        rV.setVisible(true);
        currentChildWindow = rV;
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void fractureMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fractureMenuItemActionPerformed
        // run fracture test - for now same as all other calls, but with different form

        currentCommunicationSystem = new APCSCommunication(configSettings);
        if (commPortIndex>0) {
            if (currentCommunicationSystem.openPort(commPortList.get(commPortIndex-1))==false)
            {
                JOptionPane.showMessageDialog(this,"Error trying to open COMM port","APCS",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        enableMenus(false);
        checkChamberAndRangeSelections();
        FractureTest b = new FractureTest(currentCommunicationSystem, this, groupPath);
        b.initialize();
        b.setVisible(true);
        currentChildWindow=b;
    }//GEN-LAST:event_fractureMenuItemActionPerformed

    private void quickBurstTestMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickBurstTestMenuItemActionPerformed
        // run quick burst test - for now same as all other calls, but with different form
        currentCommunicationSystem = new APCSCommunication(configSettings); 
        if (commPortIndex>0) {
            if (currentCommunicationSystem.openPort(commPortList.get(commPortIndex-1))==false)
            {
                JOptionPane.showMessageDialog(this,"Error trying to open COMM port","APCS",JOptionPane.ERROR_MESSAGE);
                return; 
            }
        }
        enableMenus(false);
        checkChamberAndRangeSelections();
        QuickBurstTester b = new QuickBurstTester(currentCommunicationSystem, this, groupPath);
        b.setVisible(true);
        b.initialize();
        currentChildWindow=b;
    }//GEN-LAST:event_quickBurstTestMenuItemActionPerformed

    private void selectCommPortMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectCommPortMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectCommPortMenuActionPerformed
    
    private void saveCurrentGroupValues() {
        int i=com.pmiapp.common.GaugeChannel.saveConfigValues(groupProperties, groupConfigFile,
            new File(groupPath, "apcs.config.temp"),
            new File(groupPath, "apcs.config.old"));
        if (i==-1) {
            JOptionPane.showMessageDialog(rootPane,
                "Can't open apcs.config.temp to output new group configuration values."+
                "  Any settings changes will be lost","APCS",
                JOptionPane.ERROR_MESSAGE);
        }
        else if (i==-2) {
            JOptionPane.showMessageDialog(rootPane,
                "Can't rename temporary group configuration file.  "+
                "Your new configuration settings are in file apcs.config.temp.",
                "APCS",JOptionPane.ERROR_MESSAGE);
        }            
    }
    
    private void setupGroup() {
        if (currentGroupIndex==-1) {
            // for default group, we only need to reset the APCSConfig file to the all-global values
            groupLabel.setText("Group: *Default*");
            configProperties.setProperty("currentGroup","*Default*");
            configSettings = new APCSConfig(configProperties);
            groupPath=userPath;
            groupProperties=null; //just in case
            groupConfigFile=null; //just in case
        }
        else {
            // for non-default group, load in the user specific settings
            groupLabel.setText("Group: "+groupsList[currentGroupIndex]);
            configProperties.setProperty("currentGroup",groupsList[currentGroupIndex]);
            groupPath=userPath+File.separator+"groups"+File.separator+groupsList[currentGroupIndex];
            groupProperties = new Properties();
            groupConfigFile = new File(groupPath,"apcs.config");
            try {
                FileInputStream tempFIS = new FileInputStream(groupConfigFile);
                groupProperties.load(tempFIS);
                tempFIS.close();
            } catch (IOException e) {}
            configSettings=new APCSConfig(configProperties, groupProperties);
        }
    }

    private void enableMenus(boolean b) {
        setupMenu.setEnabled(b);
        mainMenu.setEnabled(b);
        systemMenu.setEnabled(b);
        groupsMenu.setEnabled(b);
        chamberRadioButton1.setEnabled(b);
        chamberRadioButton2.setEnabled(b);
        rangeRadioButton1.setEnabled(b);
        rangeRadioButton2.setEnabled(b);
    }
    
    private void initializeStuff() {
        // check for uniqueness of this instance
        com.pmiapp.common.UniqueApp ua = new com.pmiapp.common.UniqueApp(userPath,"APCS");
        if (ua.isAppActive()) {
            JOptionPane.showMessageDialog(rootPane,"Another copy of this program seems to be running in the same path","APCS",JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
        //jLabel2.setText("Program: "+exePath);
        //jLabel3.setText("User: "+userPath);
        //jLabel4.setText("No errors");
        // check to see if we are using groups
        // there will be a "groups" directory in the user path
        File groupsPath=new File(userPath,"groups");
        if (groupsPath.isDirectory()) {
            File[] glf=groupsPath.listFiles(new java.io.FileFilter() {
                public boolean accept(File file) {
                    return file.isDirectory();
                }
            });
            if (glf==null) {
                usingGroups=false;
            }
            else {
                if (glf.length==0) {
                    usingGroups=false;
                }
                else {
                    usingGroups=true;
                    groupsList=new String[glf.length];
                    for (int i=0; i<glf.length; i++) {
                        groupsList[i]=glf[i].getName();
                    }
                    java.util.Arrays.sort(groupsList);
                }
            }
        }
        else {
            usingGroups=false;
        }
        groupLabel.setVisible(usingGroups);
        groupsMenu.setVisible(usingGroups);
        startGroupsMenuItem.setVisible(usingGroups==false);
        commPortList = new ArrayList<CommPortIdentifier>();
        ArrayList<JRadioButtonMenuItem> commMenuList=new ArrayList<JRadioButtonMenuItem>();
        Enumeration portlist;
        CommPortIdentifier port;
        // 0th element is already defined in the menu - demo mode
        commMenuList.add(jRadioButtonMenuItem1);
        // now fill the menu array with the available comm ports
        int i = 0; // last element used
        try {
            portlist = CommPortIdentifier.getPortIdentifiers();
            while (portlist.hasMoreElements()) {
                port = (CommPortIdentifier) portlist.nextElement();
                if (port.getPortType() == CommPortIdentifier.PORT_SERIAL) {
                    i++;
                    JRadioButtonMenuItem item = new JRadioButtonMenuItem();
                    buttonGroup1.add(item);
                    commMenuList.add(item);
                    final int ii=i; // need final version of current value of i for the constructor
                    item.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent evt) {
                            doCommMenuClick(ii);
                        }
                    });
                    item.setText(port.getName());
                    selectCommPortMenu.add(item);
                    commPortList.add(port);
                }
            }
        } catch (NoClassDefFoundError e) {
            JOptionPane.showMessageDialog(rootPane,"Error trying to ennumerate COMM ports","APCS",JOptionPane.ERROR_MESSAGE);
        }
        currentCommunicationSystem=null; // just in case
        // read the properties to find out which comm port we are using
        configProperties = new Properties();
        configFile = new File(userPath, "apcs.config");
        try {
            FileInputStream tempFIS = new FileInputStream(configFile);
            configProperties.load(tempFIS);
            tempFIS.close();
        } catch (IOException e) {
//                JOptionPane.showMessageDialog(rootPane,
//                "Error loading configuration settings.  If this is the first "+
//                "time you have run this program, this could be normal.  Using "+
//                "default configration settings.","APCS",
//                JOptionPane.INFORMATION_MESSAGE);
        }
        commPortIndex=0; // default to demo mode
        String s = configProperties.getProperty("commPortName","");
        // i still holds the size of commPortList
        for (int j=0; j<i; j++) {
            if (s.compareTo((commPortList.get(j)).getName())==0) {
                commPortIndex=j+1; // 0 signifies demo mode
                break;
            }
        }
        if ((commPortIndex<0) || (commPortIndex>i)) {
            commPortIndex=0;
        }
        // select current port
        // remember that commMenuList is one larger since it has the "Demo"
        // selection as the 0th element
        (commMenuList.get(commPortIndex)).setSelected(true);
        demoLabel.setVisible(commPortIndex==0);

        // set the Look And Feel to what they want it to be
        com.pmiapp.common.LAFMenuSupport lafms = new com.pmiapp.common.LAFMenuSupport(this, setWindowStyleMenu,configProperties);

        // see if we are using something other than the default group
        currentGroupIndex=-1; // default value
        if (usingGroups) {
            s=configProperties.getProperty("currentGroup", "*Default*");
            if (s.equals("*Default*")==false) {
                for (int j=0; j<groupsList.length; j++) {
                    if (s.equals(groupsList[j])) {
                        currentGroupIndex=j;
                        break;
                    }
                }
            }
        }
        setupGroup();
        if (configSettings.getNumberOfChambers()>1) {
            if (configSettings.getCurrentChamberNumber()==1) {
                chamberRadioButton1.setSelected(true);
            }
            else {
                chamberRadioButton2.setSelected(true);
            }
        }
        else {
            chamberPanel.setVisible(false);
        }
        if (configSettings.getNumberOfRanges()>1) {
            if (configSettings.getCurrentRangeNumber()==1) {
                rangeRadioButton1.setSelected(true);
            }
            else {
                rangeRadioButton2.setSelected(true);
            }
        }
        else {
            rangePanel.setVisible(false);
        }
        // center the form on the screen, so we can get the default location values
        configSettings.setWindowPosition(this);
        if (configSettings.isBurstTester()) {
            titleLabel1.setText("Automated Burst");
            titleLabel2.setText("Pressure Tester");
            singlePressureMenuItem.setEnabled(false);
        }
        else {
            // leave the title as APCS
            burstTestMenuItem.setEnabled(false);
        }
        cycleTestMenuItem.setEnabled(configSettings.isCycleTestEnabled());
        setVisible(true);
        pack();
        setModeStuff(configSettings.isSupervisorMode());
    }
    
    private void setModeStuff(boolean supervisorMode) {
        changePasswordMenuItem.setVisible(supervisorMode);
        systemMenu.setVisible(supervisorMode);
        supervisorCheckBoxMenuItem.setSelected(supervisorMode);
        userCheckBoxMenuItem.setSelected(!supervisorMode);
        startGroupsMenuItem.setEnabled(supervisorMode);
    }
    
    private void doCommMenuClick(int i) {
        // the click should have already moved the selected checkmark
        commPortIndex=i;
        if (i>0) {
            configProperties.setProperty("commPortName",
                       (commPortList.get(i-1)).getName());
        }
        else {
            configProperties.setProperty("commPortName","DEMO");
        }
        demoLabel.setVisible(commPortIndex==0);
    }    

    // these are not needed any more - no one should be calling TitleScrn qua TitleScrn - that is what the Notifiable interface is for
//    /** get the current executable path - used to access original read-only files that should be within this path
//     * @return the current executable path
//     */
//    protected String getExePath() {
//        return exePath;
//    }
//    /** get the current user path - used to access user read-write files that should be within this path
//     * @return the current user path
//     */
//    protected String getUserPath() {
//        return userPath;
//    }
    
    /**
     * Part of Notifiable interface.  Child forms that are only allowed to have one instance
     * use this to notify this form that they are done.
     * @param finishedTaskWindow Windows of child form that has just closed.  This can be disposed after we
     * retrieve any information we need from it.  If this is null, this is a special notification that a task
     * had been told to close (by us) but decided not to close, so we should forget that we were planning
     * on closing.
     * @param tag For future expansion to allow multiple child windows.  Not currently used.
     */
    public void notifyTaskFinished(java.awt.Window finishedTaskWindow, int tag) {
        if (finishedTaskWindow==null) {
            planToCloseLater=false;
            return;
        }
        if(tag == 2){
            //Report Program return
            finishedTaskWindow.dispose();
            enableMenus(true);
            return;
        }
        if (currentChildWindow==null) {
            JOptionPane.showMessageDialog(this,"Error:  Notification of closing of child window when your child window is registered","APCS",JOptionPane.ERROR_MESSAGE);
        }
        else if (currentChildWindow!=finishedTaskWindow) {
            JOptionPane.showMessageDialog(this,"Error:  Notification of closing of child window does not match currently registered child window","APCS",JOptionPane.ERROR_MESSAGE);
        }
        currentChildWindow=null;
        if (currentCommunicationSystem==null) {
            JOptionPane.showMessageDialog(rootPane,"Error: Notification of closing of communication user when no communication port is open","APCS",JOptionPane.ERROR_MESSAGE);            
        }
        else {
            currentCommunicationSystem.closePort();
            currentCommunicationSystem=null;
        }
        finishedTaskWindow.dispose();
        enableMenus(true);
        if (configSettings.getNumberOfChambers()>1) {
            if (configSettings.getCurrentChamberNumber()==1) {
                chamberRadioButton1.setSelected(true);
            }
            else {
                chamberRadioButton2.setSelected(true);
            }
        }        
    }
    
    private void checkChamberAndRangeSelections() {
        int i;
        // call this AFTER opening the currentCommunicationSystem and disabling the menus
        // and BEFORE showing the form that will actually run the machine
        // This checks to make sure that valve 2 from the unused chamber is closed
        if (configSettings.getNumberOfChambers()>1) {
            i=configSettings.getCurrentChamberNumber();
            // assume this will always be 1 or 2 for now.  We will have to change this if we ever
            // have to deal with more than 2 chambers
            // set to the one we are not using
            configSettings.setCurrentChamberNumber(3-i);
            currentCommunicationSystem.controlMotor(1,'C');
            // this should be rewritten to use a different thread and allow it to be aborted
            while (currentCommunicationSystem.getMotorStatus(1)!=0) {}
            currentCommunicationSystem.controlMotor(1,'S'); // just in case
            // set back to the one we are using
            configSettings.setCurrentChamberNumber(i);
        }
        // This checks to make sure that valve 1 from the unused range is open
        if (configSettings.getNumberOfRanges()>1) {
            i=configSettings.getCurrentRangeNumber();
            // assume this will always be 1 or 2 for now.  We will have to change this if we ever
            // have to deal with more than 2 ranges
            // set to the one we are not using
            configSettings.setCurrentRangeNumber(3-i);
            currentCommunicationSystem.controlMotor(0,'O');
            // this should be rewritten to use a different thread and allow it to be aborted
            while (currentCommunicationSystem.getMotorStatus(0)!=0) {}
            currentCommunicationSystem.controlMotor(0,'S'); // just in case
            // set back to the one we are using
            configSettings.setCurrentRangeNumber(i);
        }
    }
    
    // my variables
    private ArrayList<CommPortIdentifier> commPortList;
    private Properties configProperties, groupProperties;
    private APCSConfig configSettings;
    private File configFile, groupConfigFile;
    private String exePath;
    private String userPath;
    private String groupPath;
    private int commPortIndex;
    private APCSCommunication currentCommunicationSystem;
    private boolean usingGroups;
    private String[] groupsList;
    private int currentGroupIndex;
    private java.awt.Window currentChildWindow;
    private boolean planToCloseLater;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addGroupMenuItem;
    private javax.swing.JLabel applogo;
    private javax.swing.JMenuItem burstTestMenuItem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JMenuItem calibrateMenuItem;
    private javax.swing.JPanel chamberPanel;
    private javax.swing.JRadioButton chamberRadioButton1;
    private javax.swing.JRadioButton chamberRadioButton2;
    private javax.swing.JMenuItem changePasswordMenuItem;
    private javax.swing.JMenuItem commHandshakeTimingMenuItem;
    private javax.swing.JMenuItem controlParameterMenuItem;
    private javax.swing.JMenuItem cycleTestMenuItem;
    private javax.swing.JLabel demoLabel;
    private javax.swing.JMenu exitMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem fractureMenuItem;
    private javax.swing.JLabel groupLabel;
    private javax.swing.JMenu groupsMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenu mainMenu;
    private javax.swing.JMenuItem manualControlMenuItem;
    private javax.swing.JMenuItem multiPressureMenuItem;
    private javax.swing.JMenuItem purgeFluidMenuItem;
    private javax.swing.JMenuItem quickBurstTestMenuItem;
    private javax.swing.JPanel rangePanel;
    private javax.swing.JRadioButton rangeRadioButton1;
    private javax.swing.JRadioButton rangeRadioButton2;
    private javax.swing.JMenu selectCommPortMenu;
    private javax.swing.JMenuItem selectGroupMenuItem;
    private javax.swing.JMenu selectModeMenu;
    private javax.swing.JMenu setWindowStyleMenu;
    private javax.swing.JMenu setupMenu;
    private javax.swing.JMenuItem singlePressureMenuItem;
    private javax.swing.JLabel spacerLabel;
    private javax.swing.JMenuItem startGroupsMenuItem;
    private javax.swing.JCheckBoxMenuItem supervisorCheckBoxMenuItem;
    private javax.swing.JMenu systemMenu;
    private javax.swing.JLabel titleLabel1;
    private javax.swing.JLabel titleLabel2;
    private javax.swing.JLabel titleLabel3;
    private javax.swing.JCheckBoxMenuItem userCheckBoxMenuItem;
    // End of variables declaration//GEN-END:variables
    
}
